#!/usr/bin/perl
use strict;
use warnings;

use Data::Dumper;
use Time::HiRes qw(time);

use lib 'graph';
use Fastgraph;

sub td_start {
	$main::x____time = time();
}

sub td_end {
	my $diff = time() - $main::x____time;
	return sprintf("%.3f seconds", $diff);
}

# ---

$| = 1;

our %lines;
do("data/master");

print STDERR "Building graph";
td_start();

my $g = new Fastgraph;
while (my ($line, $linedata) = each(%lines)) {
	for (my $c = 0; $c < scalar(@{$linedata->{stops}}) - 2; $c += 2) {
		$g->addedge(
			$linedata->{stops}->[$c+0]->{city} . " " . $linedata->{stops}->[$c+0]->{name},
			$linedata->{stops}->[$c+2]->{city} . " " . $linedata->{stops}->[$c+2]->{name},
			$linedata->{stops}->[$c+1]
		);
	}
}

print STDERR " - done (". $g->countvertices() . " vertices, spent " . td_end() . ").\n";
td_start();
my @way = $g->dijkstra($ARGV[0], $ARGV[1]);
print STDERR "Found a way (took " . td_end() . ")!\n";

sub dumpway {
	my @way = @_;
	return join(" . ", @way) . "\n";
}

print dumpway(@way);

