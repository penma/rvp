#!/usr/bin/perl
use strict;
use warnings;

use Data::Dumper;
use Time::HiRes qw(time);
use File::Slurp;
use File::Find::Rule;
use Storable qw(dclone);

use FastaGraph;

$| = 1;

my $g = FastaGraph->new();

my @datafiles = File::Find::Rule->file()->in("data");

my $last_to;
for my $df (@datafiles) {
	my @stops = read_file($df);
	chomp(@stops);

	if ($stops[0] !~ /^#/) {
		# simple format
		for (my $c = 0; $c < scalar(@stops) - 1; $c++) {
			$g->addedge($stops[$c], $stops[$c + 1], 1);
			$g->addedge($stops[$c + 1], $stops[$c], 1);
		}
	} else {
		# extended format: each line is exactly one segment:
		# [from]    [to]   [time_estimate] [dir]
		for (my $c = 1; $c < scalar(@stops); $c++) {
			my ($from, $to, $time_estimate, $autoreverse) = ($stops[$c] =~ /^\[(.*?)\]\s+\[(.*?)\]\s+\[(\d+)\]\s+\[(\d)\]$/);
			next if (!defined($from) and !defined($to)); # skip lines without the right format
			if ($from eq "") { $from = $last_to; }
			$g->addedge($from, $to, $time_estimate);
			$g->addedge($to, $from, $time_estimate) if ($autoreverse);
			$last_to = $to;
		}
	}
}

sub walk_the_tree {
	my ($graph, $from, $to, $level, $del_to) = @_;
	my @d = [ $graph->dijkstra($from, $to, $del_to) ];

	if ($level > 0) {
		foreach (0..(@{$d[0]}-2)) {
			# from copies of the graph, remove one edge from the result path,
			# and continue finding paths on that tree.
			my $g2 = dclone($graph);
			$g2->deledge($d[0]->[$_], $d[0]->[$_+1]);
			my @new = walk_the_tree($g2, $from, $to, $level - 1, $d[0]->[$_+1]);

			# add all new paths, unless they are already present in the result set
			foreach my $n (@new) {
				push(@d, $n) unless grep { $n ~~ $_ } @d;
			}
		}
	}

	@d;
}

sub path_length {
	my ($graph, $path) = @_;
	my $w = 0;
	for (my $c = 0; $c < @{$path} - 1; $c++) {
		$w += (grep { $_->[0] eq $path->[$c] and $_->[1] eq $path->[$c + 1] } @{$graph->{vertices}->{$path->[$c]}->[1]})[0]->[2];
	}
	$w;
}


my @conn = walk_the_tree($g, $ARGV[0], $ARGV[1], 2);
my $raw = join("\n", map { path_length($g, $_) . " " . join(" -> ", @$_) } @conn);
$raw =~ s/Overbruchstraße -> Wichernheim -> Am Weißen Stein -> Kreuzweg -> Hauerstraße -> Walsumer Wardtstraße -> Königstraße -> Alt-Walsum Friedhof -> Am Römerberg/Overbruchstraße ...919... Am Römerberg/g;
$raw =~ s/Watereck -> DIN-Bärenstraße -> DIN-Pollenkamp -> DIN-Trabrennbahn -> DIN-Neustraße -> DIN-Bahnhof/Watereck ...903... DIN-Bahnhof/g;
$raw =~ s/Walsum Rathaus -> Sonnenstraße -> Schwan -> Striepweg -> Heckmann -> Wolfstraße -> Marxloh Pollmann/Walsum Rathaus ...903... Marxloh Pollmann/g;
$raw =~ s/Hamborn Feuerwache -> Amsterdamer Straße -> Theodor-Heuss-Straße -> Landschaftspark Nord -> Voßstraße -> Emilstraße -> Meiderich Bahnhof/Hamborn Feuerwache ...903... Meiderich Bahnhof/g;
$raw =~ s/Vierlinden -> Fasanenstraße -> Walsum Betriebshof -> Walsum Rathaus/Vierlinden -> Walsum Rathaus/g; # can do this because currently the duration is the same, and not replacing it just spams the diff-s
print $raw;

