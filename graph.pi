# vim:ft=perl
use strict;
use warnings;

use Heap::Priority;

sub g_new { return { vertices => {}, edges => [] }; }
sub g_vertex {
	my ($g, $name) = @_;
	if (!exists($g->{vertices}->{$name})) {
		$g->{vertices}->{$name} = {
			_name => $name,
			_edges => []
		};
	}
	return $g->{vertices}->{$name};
}

sub g_edge {
	my ($g, $from, $to, $weight) = @_;
	my $v_from = g_vertex($g, $from);
	my $v_to   = g_vertex($g, $to);

	my $edge = {
		from   => $from,
		to     => $to,
		weight => $weight
	};

	push(@{$g->{edges}}, $edge);
	push(@{$v_from->{_edges}}, $edge);
	push(@{$v_to->{_edges}}, $edge);
}

sub g_dijkstra {
	my ($g, $from, $to) = @_;

	return undef if (!exists($g->{vertices}->{$to}));

	my $vert = $g->{vertices};
	my %dist;                       # distance from start node
	# nodes that have never been touched (where dist == infinity,
	# NOT nodes that just are not optimal yet.)
	my @unvisited = grep { $_ ne $from } keys(%{$vert});
	my $infinity = -1;
	my $suboptimal = new Heap::Priority;
	$suboptimal->lowest_first();
	$suboptimal->add($from, 0);

	$dist{$_} = $infinity foreach (@unvisited);
	$dist{$from} = 0;

	while (1) {
		# find the smallest unvisited node
		my $current = $suboptimal->pop();
		if (!defined($current)) {
			$current = pop(@unvisited);
		}
		last if (!defined($current));

		# update all neighbors
		foreach my $edge (grep { $_->{from} eq $current } @{$vert->{$current}->{_edges}}) {
			if (($dist{$edge->{to}} eq $infinity) ||
			($dist{$edge->{to}} > ($dist{$current} + $edge->{weight}) )) {
				$dist{$edge->{to}} = $dist{$current} + $edge->{weight};
				$suboptimal->delete_item($edge->{to});
				$suboptimal->add($edge->{to}, $dist{$edge->{to}});
			}
		}
	}

	# trace the path from the destination to the start
	my @path = ();
	my $current = $to;
	while ($current ne $from) {
		unshift(@path, $current);
		foreach my $edge (grep { $_->{to} eq $current } @{$vert->{$current}->{_edges}}) {
			if ($dist{$current} == $dist{$edge->{from}} + $edge->{weight}) {
				$current = $edge->{from};
				last;
			}
		}
	}
	unshift(@path, $from);

	return @path;
}

sub g_count_vertices {
	my ($g) = @_;
	return scalar(keys(%{$g->{vertices}}));
}

sub g_count_edges {
	my ($g) = @_;
	return scalar(@{$g->{edges}});
}

1;

