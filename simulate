#!/usr/bin/env perl
use strict;
use warnings;
use 5.010;

use Data::Dumper;
use Date::Format;
use Date::Parse;
use List::Util qw(min);
use List::MoreUtils qw(firstidx after);
use Storable qw(dclone);

# these are shorthands for many stations. useful since the names are hardcoded below. (for now)
use constant {
	s_vie => "Vierlinden",               s_fas => "Fasanenstraße",
	s_wab => "Walsum Betriebshof",       s_war => "Walsum Rathaus",
	s_son => "Sonnenstraße",             s_swa => "Schwan",
	s_str => "Striepweg",                s_hek => "Heckmann",
	s_wol => "Wolfstraße",               s_mpo => "Marxloh Pollmann",
	s_rrh => "Rhein-Ruhr-Halle",         s_har => "Hamborn Rathaus",
	s_haf => "Hamborn Feuerwache",       s_ams => "Amsterdamer Straße",
	s_ths => "Theodor-Heuss-Straße",     s_lpn => "Landschaftspark Nord",
	s_vos => "Voßstraße",                s_eml => "Emilstraße",
	s_mei => "Meiderich Bahnhof",        s_add => "Auf dem Damm",
	s_dsn => "Duissern",                 s_dhx => "Hauptbahnhof",
	s_kpx => "König-Heinrich-Platz",     s_stg => "Steinsche Gasse",
	s_pln => "Platanenhof",              s_mus => "Musfeldstraße",
	s_kms => "Kremerstraße",             s_kjs => "Karl-Jarres-Straße",
	s_grw => "Grunewald",                s_gbt => "Grunewald Betriebshof",
	s_kts => "Kulturstraße",             s_isk => "Im Schlenk",
	s_nef => "Neuer Friedhof",           s_mns => "Münchener Straße",
	s_stb => "Sittardsberg",             s_mlk => "Mühlenkamp",
	s_sak => "St.-Anna-Krankenhaus",     s_keb => "Kesselsberg",
	s_fht => "D-Froschenteich",          s_wtl => "D-Wittlaer",
	s_ama => "D-Am Mühlenacker",         s_ksa => "D-Kalkumer Schlossallee",
	s_klp => "D-Klemensplatz",           s_kis => "D-Kittelbachstraße",
	s_ats => "D-Alte Landstraße",        s_fls => "D-Flughafenstraße",
	s_fgp => "D-Freiligrathplatz",       s_sks => "D-Messe Ost/Stockumer Kirchstraße",
	s_nrd => "D-Nordpark/Aquazoo",       s_rep => "D-Reeser Platz",
	s_teo => "D-Theodor-Heuss-Brücke",   s_gop => "D-Golzheimer Platz",
	s_ken => "D-Kennedydamm",            s_kvs => "D-Victoriaplatz/Klever Straße",
	s_nos => "D-Nordstraße",             s_hhx => "D-Heinrich-Heine-Allee",
	s_sts => "D-Steinstraße/Königsallee",s_oss => "D-Oststraße",
	s_dhb => "D-Hauptbahnhof",           s_obm => "D-Oberbilker Markt/Warschauer Straße",
	s_els => "D-Ellerstraße",            s_obb => "D-Oberbilk/Philipshalle",
	s_ksn => "D-Kaiserslauterner Straße",s_dap => "D-Flughafen",
	s_hoe => "Hoeveler Straße",
};

# TERMS USED IN THIS CODE
# PHYSROUTE     a physical route produced by the rvp planner.
# ROUTE         the movement of exactly one train, along a specific path, at a specific time
# TRIP          a sequence of actions performed by the virtual passenger


# FIXME
# route data for the simulation
sub rt { # FIXME -- this one calculates 2009-03-22 $_[0]:$_[1]:00 CET
	return str2time("2010-03-22 $_[0]:$_[1]:00", "CET");
}
# [test dataset
# resembles actual schedules
# but parts have been removed to make things simpler
# and parts have been added to construct additional test cases.
# (s_xxx are constants containing the actual name of the station.)
my @routes = (
	{
		line => "902 Duisburg König-Heinrich-Platz (11:49-12:27)",
		route => [
			{ stop => "Watereck", time => rt(11,49) },
			{ stop => s_vie, time => rt(11,50) }, { stop => s_fas, time => rt(11,51) }, { stop => s_wab, time => rt(11,52) },
			{ stop => s_war, time => rt(11,53) }, { stop => s_son, time => rt(11,54) }, { stop => s_swa, time => rt(11,56) },
			{ stop => s_str, time => rt(11,57) }, { stop => s_hek, time => rt(11,59) }, { stop => s_wol, time => rt(12, 1) },
			{ stop => s_mpo, time => rt(12, 3) }, { stop => s_rrh, time => rt(12, 5) }, { stop => s_har, time => rt(12, 7) },
			{ stop => s_haf, time => rt(12, 9) }, { stop => s_ams, time => rt(12,10) }, { stop => s_ths, time => rt(12,11) },
			{ stop => s_lpn, time => rt(12,13) }, { stop => s_vos, time => rt(12,15) }, { stop => s_eml, time => rt(12,16) },
			{ stop => s_mei, time => rt(12,18) }, { stop => s_add, time => rt(12,19) }, { stop => s_dsn, time => rt(12,23) },
			{ stop => s_dhx, time => rt(12,25) }, { stop => s_kpx, time => rt(12,27) },
		],
	},
	{
		line => "902 Duisburg König-Heinrich-Platz (11:56-12:34)",
		route => [
			{ stop => "Watereck", time => rt(11,56) },
			{ stop => s_vie, time => rt(11,57) }, { stop => s_fas, time => rt(11,58) }, { stop => s_wab, time => rt(11,59) },
			{ stop => s_war, time => rt(12, 0) }, { stop => s_son, time => rt(12, 1) }, { stop => s_swa, time => rt(12, 3) },
			{ stop => s_str, time => rt(12, 4) }, { stop => s_hek, time => rt(12, 6) }, { stop => s_wol, time => rt(12, 8) },
			{ stop => s_mpo, time => rt(12,10) }, { stop => s_rrh, time => rt(12,12) }, { stop => s_har, time => rt(12,14) },
			{ stop => s_haf, time => rt(12,16) }, { stop => s_ams, time => rt(12,17) }, { stop => s_ths, time => rt(12,18) },
			{ stop => s_lpn, time => rt(12,20) }, { stop => s_vos, time => rt(12,22) }, { stop => s_eml, time => rt(12,23) },
			{ stop => s_mei, time => rt(12,25) }, { stop => s_add, time => rt(12,26) }, { stop => s_dsn, time => rt(12,30) },
			{ stop => s_dhx, time => rt(12,32) }, { stop => s_kpx, time => rt(12,34) },
		],
	},
	{
		line => "902 Duisburg König-Heinrich-Platz (12:04-12:42)",
		route => [
			{ stop => "Watereck", time => rt(12, 4) },
			{ stop => s_vie, time => rt(12, 5) }, { stop => s_fas, time => rt(12, 6) }, { stop => s_wab, time => rt(12, 7) },
			{ stop => s_war, time => rt(12, 8) }, { stop => s_son, time => rt(12, 9) }, { stop => s_swa, time => rt(12,11) },
			{ stop => s_str, time => rt(12,12) }, { stop => s_hek, time => rt(12,14) }, { stop => s_wol, time => rt(12,16) },
			{ stop => s_mpo, time => rt(12,18) }, { stop => s_rrh, time => rt(12,20) }, { stop => s_har, time => rt(12,22) },
			{ stop => s_haf, time => rt(12,24) }, { stop => s_ams, time => rt(12,25) }, { stop => s_ths, time => rt(12,26) },
			{ stop => s_lpn, time => rt(12,28) }, { stop => s_vos, time => rt(12,30) }, { stop => s_eml, time => rt(12,31) },
			{ stop => s_mei, time => rt(12,33) }, { stop => s_add, time => rt(12,34) }, { stop => s_dsn, time => rt(12,39) },
			{ stop => s_dhx, time => rt(12,40) }, { stop => s_kpx, time => rt(12,42) },
		],
	},
	{
		line => "902 Duisburg König-Heinrich-Platz (12:11-12:49)",
		route => [
			{ stop => "Watereck", time => rt(12,11) },
			{ stop => s_vie, time => rt(12,12) }, { stop => s_fas, time => rt(12,13) }, { stop => s_wab, time => rt(12,14) },
			{ stop => s_war, time => rt(12,15) }, { stop => s_son, time => rt(12,16) }, { stop => s_swa, time => rt(12,18) },
			{ stop => s_str, time => rt(12,19) }, { stop => s_hek, time => rt(12,21) }, { stop => s_wol, time => rt(12,23) },
			{ stop => s_mpo, time => rt(12,25) }, { stop => s_rrh, time => rt(12,27) }, { stop => s_har, time => rt(12,29) },
			{ stop => s_haf, time => rt(12,31) }, { stop => s_ams, time => rt(12,32) }, { stop => s_ths, time => rt(12,33) },
			{ stop => s_lpn, time => rt(12,35) }, { stop => s_vos, time => rt(12,37) }, { stop => s_eml, time => rt(12,38) },
			{ stop => s_mei, time => rt(12,40) }, { stop => s_add, time => rt(12,41) }, { stop => s_dsn, time => rt(12,45) },
			{ stop => s_dhx, time => rt(12,47) }, { stop => s_kpx, time => rt(12,49) },
		],
	},
	{
		line => "U93 Duisburg Landschaftspark Nord (12:05-12:19)",
		route => [
			{ stop => s_kpx, time => rt(12, 5) }, { stop => s_dhx, time => rt(12, 7) }, { stop => s_dsn, time => rt(12, 9) },
			{ stop => s_add, time => rt(12,12) }, { stop => s_mei, time => rt(12,13) }, { stop => s_eml, time => rt(12,16) },
			{ stop => s_vos, time => rt(12,17) }, { stop => s_lpn, time => rt(12,19) },
		],
	},
	{
		line => "U93 Duisburg Landschaftspark Nord (12:12-12:26)",
		route => [
			{ stop => s_kpx, time => rt(12,12) }, { stop => s_dhx, time => rt(12,14) }, { stop => s_dsn, time => rt(12,16) },
			{ stop => s_add, time => rt(12,19) }, { stop => s_mei, time => rt(12,20) }, { stop => s_eml, time => rt(12,23) },
			{ stop => s_vos, time => rt(12,24) }, { stop => s_lpn, time => rt(12,26) },
		],
	},
	{
		line => "U93 Duisburg Emilstraße (12:20-12:31)",
		route => [
			{ stop => s_kpx, time => rt(12,20) }, { stop => s_dhx, time => rt(12,22) }, { stop => s_dsn, time => rt(12,24) },
			{ stop => s_add, time => rt(12,27) }, { stop => s_mei, time => rt(12,28) }, { stop => s_eml, time => rt(12,31) },
		],
	},
	{
		line => "U93 Duisburg Emilstraße (12:27-12:35)",
		route => [
			{ stop => s_kpx, time => rt(12,27) }, { stop => s_dhx, time => rt(12,29) }, { stop => s_dsn, time => rt(12,31) },
			{ stop => s_add, time => rt(12,34) }, { stop => s_mei, time => rt(12,35) }, { stop => s_eml, time => rt(12,38) },
		],
	},
	{
		line => "U93 Duisburg Emilstraße (12:35-12:46)",
		route => [
			{ stop => s_kpx, time => rt(12,35) }, { stop => s_dhx, time => rt(12,37) }, { stop => s_dsn, time => rt(12,39) },
			{ stop => s_add, time => rt(12,42) }, { stop => s_mei, time => rt(12,43) }, { stop => s_eml, time => rt(12,46) },
		],
	},
	{
		line => "U79 Duisburg Duissern (12:04-12:08)",
		route => [
			{ stop => s_kpx, time => rt(12, 4) }, { stop => s_dhx, time => rt(12, 6) }, { stop => s_dsn, time => rt(12, 8) },
		],
	},
	{
		line => "U79 Duisburg Meiderich (12:19-12:27)",
		route => [
			{ stop => s_kpx, time => rt(12,19) }, { stop => s_dhx, time => rt(12,21) }, { stop => s_dsn, time => rt(12,23) },
			{ stop => s_add, time => rt(12,26) }, { stop => s_mei, time => rt(12,27) },
		],
	},
	{
		line => "U79 Duisburg Duissern (12:34-12:38)",
		route => [
			{ stop => s_kpx, time => rt(12,34) }, { stop => s_dhx, time => rt(12,36) }, { stop => s_dsn, time => rt(12,38) },
		],
	},
	{
		line => "U79 Duisburg Meiderich (12:49-12:57)",
		route => [
			{ stop => s_kpx, time => rt(12,49) }, { stop => s_dhx, time => rt(12,51) }, { stop => s_dsn, time => rt(12,53) },
			{ stop => s_add, time => rt(12,56) }, { stop => s_mei, time => rt(12,57) },
		],
	},
	{
		line => "U79 Duisburg König-Heinrich-Platz (12:17-12:25)",
		route => [
			{ stop => s_mei, time => rt(12,17) }, { stop => s_add, time => rt(12,18) }, { stop => s_dsn, time => rt(12,22) },
			{ stop => s_dhx, time => rt(12,23) }, { stop => s_kpx, time => rt(12,25) },
		],
	},
	{
		line => "U79 Duisburg König-Heinrich-Platz (12:32-12:40)",
		route => [
			{ stop => s_mei, time => rt(12,32) }, { stop => s_add, time => rt(12,33) }, { stop => s_dsn, time => rt(12,37) },
			{ stop => s_dhx, time => rt(12,38) }, { stop => s_kpx, time => rt(12,40) },
		],
	},
	{
		line => "U79 Duisburg König-Heinrich-Platz (12:47-12:55)",
		route => [
			{ stop => s_mei, time => rt(12,47) }, { stop => s_add, time => rt(12,48) }, { stop => s_dsn, time => rt(12,52) },
			{ stop => s_dhx, time => rt(12,53) }, { stop => s_kpx, time => rt(12,55) },
		],
	},
	{
		line => "SB40 Duisburg Hauptbahnhof (12:05-12:23)",
		route => [
			{ stop => s_vie, time => rt(12, 5) }, { stop => s_war, time => rt(12, 9) },
			{ stop => s_hoe, time => rt(12,10) }, { stop => s_dhx, time => rt(12,23) },
		],
	},
	{
		line => "SB40 Duisburg Hauptbahnhof (13:05-13:23)",
		route => [
			{ stop => s_vie, time => rt(13, 5) }, { stop => s_war, time => rt(13, 9) },
			{ stop => s_hoe, time => rt(13,10) }, { stop => s_dhx, time => rt(13,23) },
		],
	},
	{
		line => "RE1 Düsseldorf Hauptbahnhof (12:21-12:38)",
		route => [
			{ stop => s_dhx, arrive => rt(12,21), depart => rt(12,24) },
			{ stop => s_dap, arrive => rt(12,31), depart => rt(12,32) },
			{ stop => s_dhb, arrive => rt(12,38), depart => rt(12,40) },
		],
	},
	{
		line => "RE1 Düsseldorf Hauptbahnhof (13:21-13:38)",
		route => [
			{ stop => s_dhx, arrive => rt(13,21), depart => rt(13,24) },
			{ stop => s_dap, arrive => rt(13,31), depart => rt(13,32) },
			{ stop => s_dhb, arrive => rt(13,38), depart => rt(13,40) },
		],
	},
	{
		line => "RE5 Düsseldorf Hauptbahnhof (12:40-12:56)",
		route => [
			{ stop => s_dhx, arrive => rt(12,40), depart => rt(12,42) },
			{ stop => "Großenbaum S", time => rt(12,55) },
			{ stop => s_dap, arrive => rt(12,51), depart => rt(12,51) },
			{ stop => s_dhb, arrive => rt(12,56), depart => rt(12,58) },
		],
	},
	{
		line => "RE5 Düsseldorf Hauptbahnhof (13:40-13:56)",
		route => [
			{ stop => s_dhx, arrive => rt(13,40), depart => rt(13,42) },
			{ stop => s_dap, arrive => rt(13,51), depart => rt(13,51) },
			{ stop => s_dhb, arrive => rt(13,56), depart => rt(13,58) },
		],
	},
);
# ...test dataset.]

# process dataset: set arrive and depart times even if they are the same or so.
map { map {
	$_->{arrive} //= $_->{time};
	$_->{depart} //= $_->{time};
} @{$_->{route}} } @routes;

# FIXME
# data from rvp-planner
my @dr_mpo_dhx_903 = (s_rrh, s_har, s_haf, s_ams, s_ths, s_lpn, s_vos, s_eml, s_mei, s_add, s_dsn);
# simulate these.
my @physroutes = (
	[
		s_vie, s_fas, s_wab, s_war, s_son, s_swa, s_str, s_hek, s_wol, s_mpo,
		@dr_mpo_dhx_903, s_dhx, s_dap, s_dhb,
	],
	[ s_vie, s_fas, s_wab, s_war, s_hoe, s_dhx, s_dsn, ],
);
my $starttime = str2time("2010-03-22 12:03:00", "CET");

sub trip_details {
	my ($trip) = @_;
	sprintf("((%s) %s %s %s): %s",
		time2str("%H:%M", $trip->{state}->{next_time}, "CET"),
		$trip->{state}->{state},
		$trip->{state}->{station},
		$trip->{state}->{route} ? $trip->{state}->{route}->{line} : "-",
		join(" - ", map { sprintf("(%s) %s %s",
			time2str("%H:%M", $_->{time}, "CET"),
			$_->{event},
			$_->{station}
		) } @{$trip->{events}}),
	);
}

foreach my $physroute (@physroutes) {
	print "\n" . "-" x 80 . "\n\n";
	print "next route: " . join(" - ", @{$physroute}) . "\n";

	# initialize the trips list with one trip, that starts with the
	# virtual passenger (VP) at the start station.

	my @trips = (
		{
			state => {
				station   => $physroute->[0],
				next_time => $starttime,
				route     => undef,
				state     => "wait_arrive_station",
			},
			events => [
				{
					event   => "vp_start",
					station => $physroute->[0],
					time    => $starttime,
				},
			],
		},
	);

	my @completed_trips;

	while (@trips) {
		# next simulation point-in-time: smallest NSC
		my $nsc = min map { $_->{state}->{next_time} } @trips;
		print "\n\nsimulation time: " . time2str("%H:%M", $nsc, "CET") . "\n";

		# process all trips with that NSC.
		@trips = ((grep { $_->{state}->{next_time} != $nsc } @trips), map {
			my $trip = $_;

			print "evaluating trip " . trip_details($trip) . "\n";

			# FIXME this will (very likely) break when a station is present on a route
			#       twice. this can happen (ring lines, drug overdose, ..)

			# XXX oh let's insert some sanity checks here.
			if (!defined($trip->{state}->{next_time})) {
				die("Trip " . trip_details($trip) . " -- has NO CURRENT TIME!");
			}
			if (!defined($trip->{state}->{station})) {
				die("Trip " . trip_details($trip) . " -- has NO CURRENT STATION!");
			}
			if (!($trip->{state}->{station} ~~ $physroute)) {
				die("Trip " . trip_details($trip) . " -- ended up off-route");
			}

			if ($trip->{state}->{state} eq "wait_arrive_station") {
				my $next_stop = (after { $_ eq $trip->{state}->{station} } @{$physroute})[0];
				print "what to do now at $trip->{state}->{station}...\n";

				# XXX here, ask the on-demand route generator.
				# find out all routes that:
				# 1) contain the current station
				# 2) contain the next station immediately after that in the route
				# 3) have their depart time after the current time
				my @poss_routes = map {
					my $route = $_;
					my $i_curr = firstidx { $_->{stop} eq $trip->{state}->{station} } @{$route->{route}};
					if ($i_curr == -1) { # cond 1
						()
					} elsif (!defined($route->{route}->[$i_curr + 1]) or $route->{route}->[$i_curr + 1]->{stop} ne $next_stop) { # cond 2
						();
					} elsif ($route->{route}->[$i_curr]->{depart} < $nsc) { # cond 3
						();
					} else {
						({
							route     => $route,
							route_pos => $i_curr,
							arrive    => $route->{route}->[$i_curr]->{arrive},
							depart    => $route->{route}->[$i_curr]->{depart},
						});
					}
				} @routes;

				print "* stay around and wait for one of these trains?\n";
				print "  - $_->{route}->{line} (arrives " . time2str("%H:%M", $_->{arrive}) . ")\n" foreach grep { $_->{arrive} > $nsc } @poss_routes;
				print "* enter one of these wonderful trains to get to $next_stop?\n";
				print "  - $_->{route}->{line} (departs " . time2str("%H:%M", $_->{depart}) . ")\n" foreach grep { $_->{arrive} <= $nsc } @poss_routes;

				# let's generate additional trips for the two possibilities.
				# note that the trip data is NOT deep cloned. this is intentional.
				my @rt;

				# if there are other trains that have not arrived yet, add trips for them.
				my $min_nsc = min map { $_->{arrive} } grep { $_->{arrive} > $nsc } @poss_routes;
				if (defined($min_nsc)) {
					push(@rt, {
						events => [ @{$trip->{events}} ],
						state => {
							station   => $trip->{state}->{station},
							next_time => $min_nsc,
							route     => undef,
							state     => "wait_arrive_station",
						},
					});
				}

				# add trips for all trains that have already arrived.
				foreach my $pr (grep { $_->{arrive} <= $nsc } @poss_routes) {
					push(@rt, {
						events => [ @{$trip->{events}}, {
							time    => $nsc,
							event   => "enter",
							station => $trip->{state}->{station},
							route   => $pr->{route},
						} ],
						state => {
							station   => $trip->{state}->{station},
							next_time => $pr->{depart},
							route     => $pr->{route},
							route_pos => $pr->{route_pos},
							state     => "wait_depart_train",
						},
					});
				}

				@rt;
			} elsif ($trip->{state}->{state} eq "wait_depart_train") {
				# flee with the train that has been entered.
				{
					events => [ @{$trip->{events}}, {
						time    => $nsc,
						event   => "depart",
						station => $trip->{state}->{station},
						route   => $trip->{state}->{route},
					} ],
					state => {
						station   => $trip->{state}->{station},
						next_time => $trip->{state}->{route}->{route}->[$trip->{state}->{route_pos} + 1]->{arrive},
						route     => $trip->{state}->{route},
						route_pos => $trip->{state}->{route_pos},
						state     => "wait_arrive_train",
					},
				};
			} elsif ($trip->{state}->{state} eq "wait_arrive_train") {
				# we arrived!
				# TODO attempt exiting trains, and don't depart if that leads us off-route.
				{
					events => [ @{$trip->{events}}, {
						time    => $nsc,
						event   => "arrive",
						station => $trip->{state}->{route}->{route}->[$trip->{state}->{route_pos} + 1]->{stop},
						route   => $trip->{state}->{route},
					} ],
					state => {
						station   => $trip->{state}->{route}->{route}->[$trip->{state}->{route_pos} + 1]->{stop},
						next_time => $trip->{state}->{route}->{route}->[$trip->{state}->{route_pos} + 1]->{depart},
						route     => $trip->{state}->{route},
						route_pos => $trip->{state}->{route_pos} + 1,
						state     => "wait_depart_train",
					},
				};
			} else {
				die("Trip has entered invalid or unknown state $trip->{state}->{state}");
			}
		} grep { $_->{state}->{next_time} == $nsc } @trips);

		print "Trips:\n";
		print "* " . trip_details($_) . "\n" foreach (@trips);
		print "\n";
	}

=begin comment

	# print result trips
	foreach my $trip (@completed_trips) {
#		print Dumper($trip);
		for (my $si = 0; $si < @{$route}; $si++) {
			if ($si == 0 or $si == @{$route} - 1 or $route->[$si]->{line} ne $route->[$si - 1]->{line}) {
				if ($si != 0) {
					printf("%5s %2s  %-30s\n",
						time2str("%H:%M", $route->[$si]->{arrive}, "CET"),
						"an", $route->[$si]->{station}
					);
				}
				print "\n";
				if ($si != @{$route} - 1) {
					printf("%5s %2s  %-30s  %s\n",
						time2str("%H:%M", $route->[$si]->{depart}, "CET"),
						"ab",
						$route->[$si]->{station},
						$route->[$si]->{line},
					);
				}
			}
		}
		print "\n" . "-" x 40 . "\n";
#		<STDIN>;
	}

=end

=cut

}

