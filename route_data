# vim:ft=perl
use utf8;

use RVP::Time;
use Storable qw(dclone);

# these are shorthands for many stations. useful since the names are hardcoded below. (for now)
use constant {
	s_dib => "DIN-Bahnhof",              s_dns => "DIN-Neustraße",
	s_trb => "DIN-Trabrennbahn",         s_pok => "DIN-Pollenkamp",
	s_bar => "DIN-Bärenstraße",          s_wat => "Watereck",
	s_vie => "Vierlinden",               s_fas => "Fasanenstraße",
	s_wab => "Walsum Betriebshof",       s_war => "Walsum Rathaus",
	s_son => "Sonnenstraße",             s_swa => "Schwan",
	s_str => "Striepweg",                s_hek => "Heckmann",
	s_wol => "Wolfstraße",               s_mpo => "Marxloh Pollmann",
	s_rrh => "Rhein-Ruhr-Halle",         s_har => "Hamborn Rathaus",
	s_haf => "Hamborn Feuerwache",       s_ams => "Amsterdamer Straße",
	s_ths => "Theodor-Heuss-Straße",     s_lpn => "Landschaftspark Nord",
	s_vos => "Voßstraße",                s_eml => "Emilstraße",
	s_mei => "Meiderich Bahnhof",        s_add => "Auf dem Damm",
	s_dsn => "Duissern",                 s_dhx => "Hauptbahnhof",
	s_kpx => "König-Heinrich-Platz",     s_stg => "Steinsche Gasse",
	s_pln => "Platanenhof",              s_mus => "Musfeldstraße",
	s_kms => "Kremerstraße",             s_kjs => "Karl-Jarres-Straße",
	s_grw => "Grunewald",                s_gbt => "Grunewald Betriebshof",
	s_kts => "Kulturstraße",             s_isk => "Im Schlenk",
	s_nef => "Neuer Friedhof",           s_mns => "Münchener Straße",
	s_stb => "Sittardsberg",             s_mlk => "Mühlenkamp",
	s_sak => "St.-Anna-Krankenhaus",     s_keb => "Kesselsberg",
	s_fht => "D-Froschenteich",          s_wtl => "D-Wittlaer",
	s_ama => "D-Am Mühlenacker",         s_ksa => "D-Kalkumer Schlossallee",
	s_klp => "D-Klemensplatz",           s_kis => "D-Kittelbachstraße",
	s_ats => "D-Alte Landstraße",        s_fls => "D-Flughafenstraße",
	s_fgp => "D-Freiligrathplatz",       s_sks => "D-Messe Ost/Stockumer Kirchstraße",
	s_nrd => "D-Nordpark/Aquazoo",       s_rep => "D-Reeser Platz",
	s_teo => "D-Theodor-Heuss-Brücke",   s_gop => "D-Golzheimer Platz",
	s_ken => "D-Kennedydamm",            s_kvs => "D-Victoriaplatz/Klever Straße",
	s_nos => "D-Nordstraße",             s_hhx => "D-Heinrich-Heine-Allee",
	s_sts => "D-Steinstraße/Königsallee",s_oss => "D-Oststraße",
	s_dhb => "D-Hauptbahnhof",           s_obm => "D-Oberbilker Markt/Warschauer Straße",
	s_els => "D-Ellerstraße",            s_obb => "D-Oberbilk/Philipshalle",
	s_ksn => "D-Kaiserslauterner Straße",s_dap => "D-Flughafen",
	s_hoe => "Hoeveler Straße",          s_oms => "Obermarxloh Schleife",
	s_kop => "Kopernikusstraße",         s_hab => "Hamborn Betriebshof",
	s_kps => "Kampstraße",               s_mgs => "Markgrafenstraße",
	s_mos => "Morian Stift",             s_loh => "Lohstraße",
	s_her => "Hermannstraße",            s_wil => "Wilfriedstraße",
	s_tyv => "Thyssen Verwaltung",       s_mat => "Matenastraße",
	s_tyk => "Thyssen Kokerei",          s_bed => "Beeck Denkmal",
	s_bra => "Brauerei",                 s_sks => "Stockumer Straße",
	s_nea => "Neanderstraße",            s_lak => "Laar Kirche",
	s_sho => "Scholtenhofstraße",        s_ty3 => "Thyssen Tor 30",
	s_rob => "Ruhrort Bf",               s_fri => "Friedrichsplatz",
	s_kas => "Karlstraße",               s_tfh => "Tausendfensterhaus",
	s_vin => "Vinckeweg",                s_alb => "Albertstraße",
	s_sca => "Scharnhorststraße",        s_rat => "Rathaus",
	s_lut => "Lutherplatz",              s_sws => "Schweizer Straße",
	s_zoo => "Zoo/Uni",                  s_mon => "MH-Monning",
	s_raf => "MH-Raffelberg",            s_ren => "MH-Rennbahn",
	s_jak => "MH-Jakobstraße",           s_spb => "MH-Speldorf Betriebshof",
	s_han => "MH-Hansastraße",           s_sbf => "MH-Speldorf Bf",
	s_kol => "MH-Kolkmann",              s_koe => "MH-Königstraße",
	s_bro => "MH-Schloss Broich",        s_msm => "MH-Stadtmitte",
	s_mhb => "MH-Hauptbahnhof",
	s_brk => "Brückenplatz",             s_sic => "Siechenhausstraße",
	s_pau => "Pauluskirche",             s_mah => "Marienhospital",
	s_hof => "Hochfeld Süd Bf",          s_fis => "Fischerstraße",
	s_rts => "Rheintörchenstraße",       s_nhs => "Neuenhofstraße",
	s_ehi => "Ehinger Straße",           s_hbs => "Heiligenbaumstraße",
	s_rst => "Rheinstahl",               s_bzl => "Berzelius",
	s_mt1 => "Mannesmann Tor 1",         s_mt2 => "Mannesmann Tor 2",
};

# TERMS USED IN THIS CODE
# PHYSROUTE     a physical route produced by the rvp planner.
# ROUTE         the movement of exactly one train, along a specific path, at a specific time
# TRIP          a sequence of actions performed by the virtual passenger


# FIXME
# route data for the simulation
sub rt { # FIXME -- this one calculates 2009-03-22 $_[0]:$_[1]:00 CET
	isotr_2ts("2010-03-22 $_[0]:$_[1]:00", "context");
}

# fill in complete arrive/depart information (where only "time" has been provided).
# (might get removed or replaced by something better in the future)
sub rtcompletead {
	my ($rt) = @_;
	my $nr = dclone($rt);
	map {
		$_->{arrive} //= $_->{time};
		$_->{depart} //= $_->{time};
	} @{$nr->{route}};
	$nr;
}

# add (or subtract) a time from all times in a route.
# useful for being able to provide kind of a "base time" for routes, by
# stating "all following times are relative to 11:52".
sub rtaddtime {
	my ($t_off, $rt) = @_;
	my $nr = dclone($rt);
	map {
		$_->{arrive} += $t_off;
		$_->{depart} += $t_off;
	} @{$nr->{route}};
	$nr;
}

# generate a sequence of static routes in an interval.
sub rtintvstatic {
	my ($t_start, $t_iv, $t_lastinc, $rt) = @_;
	my @r;
	for (my $t = $t_start; $t <= $t_lastinc; $t += $t_iv) {
		push(@r, rtaddtime($t, $rt));
	}
	@r;
}

# for routegens, generate an entry in the station list with a name and the specified offset (in minutes)
sub rO {
	({ station => $_[0], offset_arrive => $_[1] * 60, offset_depart => ($_[2] // $_[1]) * 60 });
}

# [test dataset
# resembles actual schedules
# but parts have been removed to make things simpler
# and parts have been added to construct additional test cases.
# (s_xxx are constants containing the actual name of the station.)

# regular route generator
sub rtgenregular {
	my %args = @_;

	print "given start time: " . ts_2isotr($args{time}, "context") . "\n";

	# find next possible start time >= given start time
	# generates start times for next day, otherwise we don't see a train
	# that arrives 0:02 when current time is 23:58.
	my @available_start_times = map {
		datetime_2ts(ts_2datetime($args{time}, "context")->truncate(to => "day")) + $_,
		datetime_2ts(ts_2datetime($args{time}, "context")->truncate(to => "day")) + $_ + 86400
		} @{$args{template}->{start_times}};

	my $next_start_time = min grep { $_ >= $args{time} } @available_start_times;

	if (!defined($next_start_time)) {
		die("NO NEXT START TIME!!!"); # actually not fatal XXX
	}

	# prepare output route
	my $route = { line => $args{template}->{line}, route => [] };

	# fill route with data from template
	foreach my $station (@{$args{template}->{stations}}) {
		push(@{$route->{route}}, {
			stop => $station->{station},
			arrive => $next_start_time + $station->{offset_arrive},
			depart => $next_start_time + $station->{offset_depart},
		});
	}

	$route;
}

# start time relative to date start (  ((h*60)+m)*60  )
sub sT {
	(($_[0] * 60) + $_[1]) * 60;
}

my @routegens = (
	{
		line => "903 Rheintörchenstraße",
		stations => [
			rO(s_wat, 0),rO(s_vie, 1),rO(s_fas, 2),rO(s_wab, 3),rO(s_war, 4),rO(s_son, 5),rO(s_swa, 7),rO(s_str, 8),rO(s_hek,10),
			rO(s_wol,12),rO(s_mpo,14),rO(s_rrh,16),rO(s_har,18),rO(s_haf,19),rO(s_ams,21),rO(s_ths,23),rO(s_lpn,24),rO(s_vos,25),
			rO(s_eml,27),rO(s_mei,29),rO(s_add,30),rO(s_dsn,34),rO(s_dhx,36),rO(s_kpx,38),rO(s_stg,39),rO(s_pln,40),rO(s_brk,41),
			rO(s_sic,42),rO(s_pau,43),rO(s_mah,45),rO(s_hof,46),rO(s_fis,48),rO(s_rts,49),
		],
		start_times => [
			(map { sT($_, 4),sT($_,19),sT($_,34),sT($_,49) } 6..18), sT(19, 4),
			sT(23,53), sT(1,58),
		],
		generator => \&rtgenregular,
	},
);

my @routes = (
	   { line => "U93 Duisburg Landschaftspark Nord (12:05-12:19)",
		route => [
			{ stop => s_kpx, time => rt(12, 5) }, { stop => s_dhx, time => rt(12, 7) }, { stop => s_dsn, time => rt(12, 9) },
			{ stop => s_add, time => rt(12,12) }, { stop => s_mei, time => rt(12,13) }, { stop => s_eml, time => rt(12,16) },
			{ stop => s_vos, time => rt(12,17) }, { stop => s_lpn, time => rt(12,19) },
		],
	}, { line => "U93 Duisburg Landschaftspark Nord (12:12-12:26)",
		route => [
			{ stop => s_kpx, time => rt(12,12) }, { stop => s_dhx, time => rt(12,14) }, { stop => s_dsn, time => rt(12,16) },
			{ stop => s_add, time => rt(12,19) }, { stop => s_mei, time => rt(12,20) }, { stop => s_eml, time => rt(12,23) },
			{ stop => s_vos, time => rt(12,24) }, { stop => s_lpn, time => rt(12,26) },
		],
	}, { line => "U93 Duisburg Emilstraße (12:20-12:31)",
		route => [
			{ stop => s_kpx, time => rt(12,20) }, { stop => s_dhx, time => rt(12,22) }, { stop => s_dsn, time => rt(12,24) },
			{ stop => s_add, time => rt(12,27) }, { stop => s_mei, time => rt(12,28) }, { stop => s_eml, time => rt(12,31) },
		],
	}, { line => "U93 Duisburg Emilstraße (12:27-12:35)",
		route => [
			{ stop => s_kpx, time => rt(12,27) }, { stop => s_dhx, time => rt(12,29) }, { stop => s_dsn, time => rt(12,31) },
			{ stop => s_add, time => rt(12,34) }, { stop => s_mei, time => rt(12,35) }, { stop => s_eml, time => rt(12,38) },
		],
	}, { line => "U93 Duisburg Emilstraße (12:35-12:46)",
		route => [
			{ stop => s_kpx, time => rt(12,35) }, { stop => s_dhx, time => rt(12,37) }, { stop => s_dsn, time => rt(12,39) },
			{ stop => s_add, time => rt(12,42) }, { stop => s_mei, time => rt(12,43) }, { stop => s_eml, time => rt(12,46) },
		],
	}, { line => "U79 Duisburg Duissern (12:04-12:08)",
		route => [
			{ stop => s_kpx, time => rt(12, 4) }, { stop => s_dhx, time => rt(12, 6) }, { stop => s_dsn, time => rt(12, 8) },
		],
	}, { line => "U79 Duisburg Meiderich (12:19-12:27)",
		route => [
			{ stop => s_kpx, time => rt(12,19) }, { stop => s_dhx, time => rt(12,21) }, { stop => s_dsn, time => rt(12,23) },
			{ stop => s_add, time => rt(12,26) }, { stop => s_mei, time => rt(12,27) },
		],
	}, { line => "U79 Duisburg Duissern (12:34-12:38)",
		route => [
			{ stop => s_kpx, time => rt(12,34) }, { stop => s_dhx, time => rt(12,36) }, { stop => s_dsn, time => rt(12,38) },
		],
	}, { line => "U79 Duisburg Meiderich (12:49-12:57)",
		route => [
			{ stop => s_kpx, time => rt(12,49) }, { stop => s_dhx, time => rt(12,51) }, { stop => s_dsn, time => rt(12,53) },
			{ stop => s_add, time => rt(12,56) }, { stop => s_mei, time => rt(12,57) },
		],
	}, { line => "U79 Duisburg König-Heinrich-Platz (12:17-12:25)",
		route => [
			{ stop => s_mei, time => rt(12,17) }, { stop => s_add, time => rt(12,18) }, { stop => s_dsn, time => rt(12,22) },
			{ stop => s_dhx, time => rt(12,23) }, { stop => s_kpx, time => rt(12,25) },
		],
	}, { line => "U79 Duisburg König-Heinrich-Platz (12:32-12:40)",
		route => [
			{ stop => s_mei, time => rt(12,32) }, { stop => s_add, time => rt(12,33) }, { stop => s_dsn, time => rt(12,37) },
			{ stop => s_dhx, time => rt(12,38) }, { stop => s_kpx, time => rt(12,40) },
		],
	}, { line => "U79 Duisburg König-Heinrich-Platz (12:47-12:55)",
		route => [
			{ stop => s_mei, time => rt(12,47) }, { stop => s_add, time => rt(12,48) }, { stop => s_dsn, time => rt(12,52) },
			{ stop => s_dhx, time => rt(12,53) }, { stop => s_kpx, time => rt(12,55) },
		],
	}, { line => "SB40 Duisburg Hauptbahnhof (12:05-12:23)",
		route => [
			{ stop => s_vie, time => rt(12, 5) }, { stop => s_war, time => rt(12, 9) },
			{ stop => s_hoe, time => rt(12,10) }, { stop => s_dhx, time => rt(12,23) },
		],
	}, { line => "SB40 Duisburg Hauptbahnhof (13:05-13:23)",
		route => [
			{ stop => s_vie, time => rt(13, 5) }, { stop => s_war, time => rt(13, 9) },
			{ stop => s_hoe, time => rt(13,10) }, { stop => s_dhx, time => rt(13,23) },
		],
	},
	rtintvstatic(rt( 5,21), 60*60, rt(23,21), rtaddtime(-rt(12,21), {
		line => "RE1 Düsseldorf Hauptbahnhof",
		route => [
			{ stop => s_dhx, arrive => rt(12,21), depart => rt(12,24) },
			{ stop => s_dap, arrive => rt(12,31), depart => rt(12,32) },
			{ stop => s_dhb, arrive => rt(12,38), depart => rt(12,40) },
		], })),
	rtintvstatic(rt( 5,40), 60*60, rt(20,40), rtaddtime(-rt(12,40), {
		line => "RE5 Düsseldorf Hauptbahnhof",
		route => [
			{ stop => s_dhx, arrive => rt(12,40), depart => rt(12,42) },
			{ stop => s_dap, arrive => rt(12,51), depart => rt(12,51) },
			{ stop => s_dhb, arrive => rt(12,56), depart => rt(12,58) },
		], })),
	{ line => "U94 Carstanjen-Garten (13:05-13:09)",
		route => [
			{ stop => s_zoo,                      depart => rt(13, 5), },
			{ stop => s_sws, arrive => rt(13, 7), depart => rt(13, 7), },
			{ stop => s_cjg, arrive => rt(13, 9),                      },
		],
	}, { line => "901 König-Heinrich-Platz (13:16-13:24)",
		route => [
			{ stop => s_zoo,                      depart => rt(13,16), },
			{ stop => s_sws, arrive => rt(13,18), depart => rt(13,18), },
			{ stop => s_cjg, arrive => rt(13,20), depart => rt(13,21), },
			{ stop => s_dhx, arrive => rt(13,22), depart => rt(13,23), },
			{ stop => s_kpx, arrive => rt(13,24),                      },
		],
	},
);
# ...test dataset.]

# process dataset: set arrive and depart times even if they are the same or so.
@routes = map { rtcompletead($_) } @routes;

# FIXME
# data from rvp-planner
my @dr_mpo_dhx_903 = (s_rrh, s_har, s_haf, s_ams, s_ths, s_lpn, s_vos, s_eml, s_mei, s_add, s_dsn);
# simulate these.
my @physroutes = (
	[
		s_vie, s_fas, s_wab, s_war, s_son, s_swa, s_str, s_hek, s_wol, s_mpo,
		@dr_mpo_dhx_903, s_dhx, s_dap, s_dhb,
	],
	[ s_vie, s_fas, s_wab, s_war, s_hoe, s_dhx, s_dsn, ],
);
#@physroutes = ([ s_vie, s_fas, s_wab, s_war, s_hoe ]); # DEBUG
#@physroutes = ([ s_zoo, s_sws, s_cjg, s_dhx, s_dap, s_dhb ]); # DEBUG
@physroutes = ([ s_vie, s_fas, s_wab, s_war ]); # DEBUG

# return
{ routes => \@routes, physroutes => \@physroutes, routegens => \@routegens, }

