# vim:ft=perl
use utf8;

use RVP::Time;
use Storable qw(dclone);

# these are shorthands for many stations. useful since the names are hardcoded below. (for now)
use constant {
	s_dib => "DIN-Bahnhof",              s_dns => "DIN-Neustraße",
	s_trb => "DIN-Trabrennbahn",         s_pok => "DIN-Pollenkamp",
	s_bar => "DIN-Bärenstraße",          s_wat => "Watereck",
	s_vie => "Vierlinden",               s_fas => "Fasanenstraße",
	s_wab => "Walsum Betriebshof",       s_war => "Walsum Rathaus",
	s_son => "Sonnenstraße",             s_swa => "Schwan",
	s_str => "Striepweg",                s_hek => "Heckmann",
	s_wol => "Wolfstraße",               s_mpo => "Marxloh Pollmann",
	s_rrh => "Rhein-Ruhr-Halle",         s_har => "Hamborn Rathaus",
	s_haf => "Hamborn Feuerwache",       s_ams => "Amsterdamer Straße",
	s_ths => "Theodor-Heuss-Straße",     s_lpn => "Landschaftspark Nord",
	s_vos => "Voßstraße",                s_eml => "Emilstraße",
	s_mei => "Meiderich Bahnhof",        s_add => "Auf dem Damm",
	s_dsn => "Duissern",                 s_dhx => "Hauptbahnhof",
	s_kpx => "König-Heinrich-Platz",     s_stg => "Steinsche Gasse",
	s_pln => "Platanenhof",              s_mus => "Musfeldstraße",
	s_kms => "Kremerstraße",             s_kjs => "Karl-Jarres-Straße",
	s_grw => "Grunewald",                s_gbt => "Grunewald Betriebshof",
	s_kts => "Kulturstraße",             s_isk => "Im Schlenk",
	s_nef => "Neuer Friedhof",           s_mns => "Münchener Straße",
	s_stb => "Sittardsberg",             s_mlk => "Mühlenkamp",
	s_sak => "St.-Anna-Krankenhaus",     s_keb => "Kesselsberg",
	s_fht => "D-Froschenteich",          s_wtl => "D-Wittlaer",
	s_ama => "D-Am Mühlenacker",         s_ksa => "D-Kalkumer Schlossallee",
	s_klp => "D-Klemensplatz",           s_kis => "D-Kittelbachstraße",
	s_ats => "D-Alte Landstraße",        s_fls => "D-Flughafenstraße",
	s_fgp => "D-Freiligrathplatz",       s_sks => "D-Messe Ost/Stockumer Kirchstraße",
	s_nrd => "D-Nordpark/Aquazoo",       s_rep => "D-Reeser Platz",
	s_teo => "D-Theodor-Heuss-Brücke",   s_gop => "D-Golzheimer Platz",
	s_ken => "D-Kennedydamm",            s_kvs => "D-Victoriaplatz/Klever Straße",
	s_nos => "D-Nordstraße",             s_hhx => "D-Heinrich-Heine-Allee",
	s_sts => "D-Steinstraße/Königsallee",s_oss => "D-Oststraße",
	s_dhb => "D-Hauptbahnhof",           s_obm => "D-Oberbilker Markt/Warschauer Straße",
	s_els => "D-Ellerstraße",            s_obb => "D-Oberbilk/Philipshalle",
	s_ksn => "D-Kaiserslauterner Straße",s_dap => "D-Flughafen",
	s_hoe => "Hoeveler Straße",          s_oms => "Obermarxloh Schleife",
	s_kop => "Kopernikusstraße",         s_hab => "Hamborn Betriebshof",
	s_kps => "Kampstraße",               s_mgs => "Markgrafenstraße",
	s_mos => "Morian Stift",             s_loh => "Lohstraße",
	s_her => "Hermannstraße",            s_wil => "Wilfriedstraße",
	s_tyv => "Thyssen Verwaltung",       s_mat => "Matenastraße",
	s_tyk => "Thyssen Kokerei",          s_bed => "Beeck Denkmal",
	s_bra => "Brauerei",                 s_sks => "Stockumer Straße",
	s_nea => "Neanderstraße",            s_lak => "Laar Kirche",
	s_sho => "Scholtenhofstraße",        s_ty3 => "Thyssen Tor 30",
	s_rob => "Ruhrort Bf",               s_fri => "Friedrichsplatz",
	s_kas => "Karlstraße",               s_tfh => "Tausendfensterhaus",
	s_vin => "Vinckeweg",                s_alb => "Albertstraße",
	s_sca => "Scharnhorststraße",        s_rat => "Rathaus",
	s_lut => "Lutherplatz",              s_sws => "Schweizer Straße",
	s_zoo => "Zoo/Uni",                  s_mon => "MH-Monning",
	s_raf => "MH-Raffelberg",            s_ren => "MH-Rennbahn",
	s_jak => "MH-Jakobstraße",           s_spb => "MH-Speldorf Betriebshof",
	s_han => "MH-Hansastraße",           s_sbf => "MH-Speldorf Bf",
	s_kol => "MH-Kolkmann",              s_koe => "MH-Königstraße",
	s_bro => "MH-Schloss Broich",        s_msm => "MH-Stadtmitte",
	s_mhb => "MH-Hauptbahnhof",
	s_brk => "Brückenplatz",             s_sic => "Siechenhausstraße",
	s_pau => "Pauluskirche",             s_mah => "Marienhospital",
	s_hof => "Hochfeld Süd Bf",          s_fis => "Fischerstraße",
	s_rts => "Rheintörchenstraße",       s_nhs => "Neuenhofstraße",
	s_ehi => "Ehinger Straße",           s_hbs => "Heiligenbaumstraße",
	s_rst => "Rheinstahl",               s_bzl => "Berzelius",
	s_mt1 => "Mannesmann Tor 1",         s_mt2 => "Mannesmann Tor 2",
};

# TERMS USED IN THIS CODE
# PHYSROUTE     a physical route produced by the rvp planner.
# ROUTE         the movement of exactly one train, along a specific path, at a specific time
# TRIP          a sequence of actions performed by the virtual passenger


# FIXME
# route data for the simulation
sub rt { # FIXME -- this one calculates 2009-03-22 $_[0]:$_[1]:00 CET
	isotr_2ts("2010-03-22 $_[0]:$_[1]:00", "context");
}

# for routegens, generate an entry in the station list with a name and the specified offset (in minutes)
sub rO {
	({ station => $_[0], offset_arrive => $_[1] * 60, offset_depart => ($_[2] // $_[1]) * 60 });
}

# start time relative to date start (  ((h*60)+m)*60  )
sub sT {
	(($_[0] * 60) + $_[1]) * 60;
}

# regular route generator
sub rtgenregular {
	my %args = @_;

	# find next possible start time >= given start time
	# generates start times for next day, otherwise we don't see a train
	# that arrives 0:02 when current time is 23:58.
	# my $sod = datetime_2ts(ts_2datetime($args{time}, "context")->truncate(to => "day"));
	my $sod = (int(($args{time} + 3600) / 86400) * 86400) - 3600;
	# ^ above algorithm not guaranteed to return correct results 1) universally 2) at all.  the right/better way has been commented out for dbg purp.

	my @available_start_times = map {
		$sod + $_,
		$sod + $_ + 86400
		} @{$args{template}->{start_times}};

	my $next_start_time = min grep { $_ >= $args{time} } @available_start_times;

	if (!defined($next_start_time)) {
		# this isn't a fatal error. it will currently die though, to aid with debugging.
		# return (); # XXX
		die("Route generator got no suitable next start time (fatal for debugging)");
	}

	# prepare output route
	my $route = { line => $args{template}->{line}, route => [] };

	# fill route with data from template
	foreach my $station (@{$args{template}->{stations}}) {
		push(@{$route->{route}}, {
			stop => $station->{station},
			arrive => $next_start_time + $station->{offset_arrive},
			depart => $next_start_time + $station->{offset_depart},
		});
	}

	$route;
}

my @routegens = (
	{
		line => "903 Rheintörchenstraße",
		stations => [
			rO(s_wat, 0),rO(s_vie, 1),rO(s_fas, 2),rO(s_wab, 3),rO(s_war, 4),rO(s_son, 5),rO(s_swa, 7),rO(s_str, 8),rO(s_hek,10),
			rO(s_wol,12),rO(s_mpo,14),rO(s_rrh,16),rO(s_har,18),rO(s_haf,19),rO(s_ams,21),rO(s_ths,23),rO(s_lpn,24),rO(s_vos,25),
			rO(s_eml,27),rO(s_mei,29),rO(s_add,30),rO(s_dsn,34),rO(s_dhx,36),rO(s_kpx,38),rO(s_stg,39),rO(s_pln,40),rO(s_brk,41),
			rO(s_sic,42),rO(s_pau,43),rO(s_mah,45),rO(s_hof,46),rO(s_fis,48),rO(s_rts,49),
		],
		start_times => [
			(map { sT($_, 4),sT($_,19),sT($_,34),sT($_,49) } 6..18), sT(19, 4),
			sT(23,53), sT(1,58),
		],
		generator => \&rtgenregular,
	},
	{
		line => "903 Mannesmann Tor 2",
		stations => [
			rO(s_dib, 0),rO(s_dns, 2),rO(s_trb, 4),rO(s_pok, 6),rO(s_bar, 7),
			rO(s_wat, 8),rO(s_vie, 9),rO(s_fas,10),rO(s_wab,11),rO(s_war,12),rO(s_son,13),rO(s_swa,15),rO(s_str,16),rO(s_hek,18),
			rO(s_wol,20),rO(s_mpo,22),rO(s_rrh,24),rO(s_har,26),rO(s_haf,27),rO(s_ams,29),rO(s_ths,31),rO(s_lpn,32),rO(s_vos,33),
			rO(s_eml,35),rO(s_mei,37),rO(s_add,38),rO(s_dsn,42),rO(s_dhx,44),rO(s_kpx,46),rO(s_stg,47),rO(s_pln,48),rO(s_brk,49),
			rO(s_sic,50),rO(s_pau,51),rO(s_mah,53),rO(s_hof,54),rO(s_fis,56),rO(s_rts,57),
			rO(s_nhs,58),rO(s_ehi,60),rO(s_hbs,61),rO(s_rst,62),rO(s_bzl,63),rO(s_mt1,64),rO(s_mt2,67),
		],
		start_times => [
			sT( 4,33), sT( 4,48),
			(map { sT($_, 3),sT($_,18),sT($_,33),sT($_,48) } 5..18),
			sT(19, 3), sT(19,18), sT(19,33),
			sT(19,52), sT(20,22), sT(20,52), sT(21,22), sT(21,52), sT(22,22), sT(22,52),
		],
		generator => \&rtgenregular,
	},
	{
		line => "SB40 Duisburg Hauptbahnhof", # afternoon
		stations => [
			rO("Walsum Overbruch", 0), rO("Franz-Lenze-Platz", 1), rO("Bahnhofstraße", 2),
			rO(s_vie, 5),rO(s_war, 9),rO(s_hoe,10),rO(s_dhx,23),
		],
		start_times => [ sT(15,55), sT(16,55), sT(17,55) ],
		generator => \&rtgenregular,
	},
);



# FIXME
# data from rvp-planner
@physroutes = ([ s_vie, s_fas, s_wab, s_war, s_hoe ]);

# return
{ physroutes => \@physroutes, routegens => \@routegens, }

